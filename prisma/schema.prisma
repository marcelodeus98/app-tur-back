generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id                    Int     @id @default(autoincrement())    
  full_name              String  @db.VarChar(255)                 
  cpf                   String?  @unique                         
  rg                    String?  @unique                         
  phone                 String? @unique                          
  email                 String  @unique                          
  password              String  @db.VarChar(100)
  address_neighborhood  String? @db.VarChar(255)
  address_street        String? @db.VarChar(255)
  address_number        String? @db.VarChar(255)
  address_complement    String? @db.VarChar(255)
  address_city          String? @db.VarChar(255)
  address_state         String? @db.VarChar(255)
  is_active             Boolean @default(true)                                
  google_id             String?                                  
  auth_provider         String?                                  
  roleId                Int
  walletId              Int?
  refreshToken          String?                          

  drivers       Drivers[]
  trips         Trips[]
  roles         Roles     @relation(fields: [roleId], references: [id])
  wallet        Wallet?   @relation(fields: [walletId], references: [id])

  @@index([roleId])
}

model Roles {
  id          Int     @id @default(autoincrement())
  name        String
  description String  @db.VarChar(1000)
  slug        String  @unique

  users       Users[]
  permissions RolePermissions[]
}

model Permissions {
  id          Int     @id @default(autoincrement())
  name        String
  description String  @db.VarChar(1000)
  slug        String  @unique

  roles       RolePermissions[]
}

model RolePermissions {
  id           Int   @id @default(autoincrement())
  permissionId Int
  roleId       Int

  role         Roles       @relation(fields: [roleId], references: [id])
  permission   Permissions @relation(fields: [permissionId], references: [id])

  @@index([roleId])
  @@index([permissionId])
}

model Drivers {
  id                  Int      @id @default(autoincrement())   
  userId              Int                                      
  number_cnh          String?  @unique                         
  img_front_cnh_url   String?  @unique                         
  img_back_cnh_url    String?  @unique                            
  status              StatusEnum @default(APPROVED)    
  operation_hours     Json?   

  users               Users    @relation(fields: [userId], references: [id])
  trips               Trips[]
  driver_vehicles     DriverVehicles[]
  packages            Packages[]
  @@index([userId])
}

model Vehicles {
  id            Int     @id @default(autoincrement())
  chassi        String?  @unique
  plate         String?  @unique
  img_plate_url String?
  brand         String?
  model         String?
  color         String?
  year          Int?
  number_seats  Int?

  driver_vehicles    DriverVehicles[]
  packages           Packages[]
}

model DriverVehicles {
  id            Int     @id @default(autoincrement())
  driver_id     Int
  vehicle_id    Int

  driver        Drivers @relation(fields: [driver_id], references: [id])
  vehicle       Vehicles @relation(fields: [vehicle_id], references: [id])

  @@index([driver_id])
  @@index([vehicle_id])
}

model Packages {
  id                   Int     @id @default(autoincrement())
  driver_id            Int
  vehicle_id           Int?
  name                 String
  description          String?  @db.VarChar(1000)
  point_origin_id      Int
  point_destination_id Int
  starting_point       String?
  duration             Float
  distance             Float?
  rate                 Float 
  amount               Float
  stops                String[] 
  is_active            Boolean @default(true)
  
  driver               Drivers @relation(fields: [driver_id], references: [id])
  vehicle              Vehicles? @relation(fields: [vehicle_id], references: [id])
  origin_point         Points @relation("PackageOrigin", fields: [point_origin_id], references: [id])
  destination_point    Points @relation("PackageDestination", fields: [point_destination_id], references: [id])
  trips                Trips[]

  @@index([point_origin_id])
  @@index([point_destination_id])
  @@index([driver_id])
}

model Points {
  id          Int     @id @default(autoincrement())
  name        String
  img_url     String?
  description String?  @db.VarChar(1000)
  city        String
  state       String
  lat         Float
  long        Float

  origin_packages      Packages[] @relation("PackageOrigin")
  destination_packages Packages[] @relation("PackageDestination")
}

model StartingPoints {
  id          Int     @id @default(autoincrement())
  name        String
  img_url     String?
  description String?  @db.VarChar(1000)
  city        String
  state       String
  lat         Float
  long        Float
}

model Trips {
  id          Int     @id @default(autoincrement())
  client_id   Int
  driver_id   Int
  package_id  Int
  status      StatusTripsEnum @default(PENDING)
  payment_id  Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  wallet_history WalletHistory[]
  payments Payments @relation(fields: [payment_id], references: [id])
  package     Packages @relation(fields: [package_id], references: [id])
  client      Users    @relation(fields: [client_id], references: [id])
  driver      Drivers  @relation(fields: [driver_id], references: [id])

  @@index([client_id])
  @@index([driver_id])
  @@index([package_id])
  @@index([payment_id])
}

model Payments {
  id                Int     @id @default(autoincrement())
  payment_types_id  Int
  status            StatusEnum @default(PENDING)
  amount            Float
  observation       String?  @db.VarChar(1000)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  payment_types     PaymentTypes @relation(fields: [payment_types_id], references: [id])
  trips             Trips[]

  @@index([payment_types_id])
}

model PaymentTypes {
  id          Int     @id @default(autoincrement())
  name        String
  description String?  @db.VarChar(1000)

  payments Payments[]
}

model Wallet {
  id          Int     @id @default(autoincrement())
  balance     Float

  users       Users[]
  wallet_history WalletHistory[]
}

model WalletHistory {
  id          Int     @id @default(autoincrement())
  type        TypeEnum
  amount      Float
  wallet_id   Int
  trip_id     Int
  observation String?  @db.VarChar(1000)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  wallet      Wallet @relation(fields: [wallet_id], references: [id])
  trip        Trips  @relation(fields: [trip_id], references: [id])
  @@index([trip_id])
  @@index([wallet_id])  
}

enum StatusEnum {
  PENDING
  APPROVED
  REJECTED
}

enum StatusTripsEnum {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

enum TypeEnum {
  DEBIT
  CREDIT
}
